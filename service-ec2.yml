Resources:
  ServiceInstances:
    Metadata:
      AWS::CloudFormation::Init:
        amazonLinux:
          files:
            "/etc/init/consul.conf":
              content: !Sub |
                description "Consul Client process"
                start on (local-filesystems and net-device-up IFACE=eth0)
                stop on runlevel [!12345]
                respawn
                exec /opt/consul/bin/consul agent -config-dir /opt/consul/config
              mode: '000755'
              owner: root
              group: root
          commands:
            start-consul:
              command: "start consul"

        centos7Linux:
          files:
            "/etc/systemd/system/consul.service":
              content:
                Fn::Sub: |
                  [Unit]
                  Description=Consul Agent

                  [Service]
                  Type=simple
                  ExecStart=/opt/consul/bin/consul agent -config-dir /opt/consul/config
                  Restart=always
                  User=root
                  Group=root
                  LimitNOFILE=10240
                  LimitFSIZE=infinity

                  [Install]
                  WantedBy=multi-user.target
              group: root
              mode: "000755"
              owner: root
          commands:
            start-consul:
              command: "systemctl start consul.service && systemctl enable consul.service"

        commonLinux:
          sources:
            "/opt/consul/bin": !Ref ConsulUrl
          files:
            "/opt/consul/config/service.json":
              content: !Sub |
                {
                  "datacenter": "${AWS::Region}",
                  "data_dir": "/opt/consul/data",
                  "retry_join": ["provider=aws tag_key=aws:autoscaling:groupName tag_value=${ConsulServerAutoScalingGroup}"],
                  "service": {
                    "name": "${ServiceName}",
                    "tags": ["${ServiceName}"],
                    "port": ${ServicePort},
                    "checks": [
                      {
                        "id": "health",
                        "name": "${ServiceProtocol} health on port ${ServicePort}",
                        "http": "${ServiceProtocol}://localhost:${ServicePort}${ServiceHealthEndpoint}",
                        "tls_skip_verify": true,
                        "method": "GET",
                        "interval": "10s",
                        "timeout": "1s"
                      }
                    ]
                  }
                }